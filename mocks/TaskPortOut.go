// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/BIGKaab/hexagonal-arquitecture-go/infraestructure/outside/gorm/entity"
	mock "github.com/stretchr/testify/mock"
)

// TaskPortOut is an autogenerated mock type for the TaskPortOut type
type TaskPortOut struct {
	mock.Mock
}

// OutAddTask provides a mock function with given fields: task
func (_m *TaskPortOut) OutAddTask(task *entity.Task) (*entity.Task, error) {
	ret := _m.Called(task)

	var r0 *entity.Task
	if rf, ok := ret.Get(0).(func(*entity.Task) *entity.Task); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutDeleteTask provides a mock function with given fields: ID
func (_m *TaskPortOut) OutDeleteTask(ID int) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OutFindTaskById provides a mock function with given fields: ID
func (_m *TaskPortOut) OutFindTaskById(ID int) (entity.Task, error) {
	ret := _m.Called(ID)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(int) entity.Task); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutGetAllTasks provides a mock function with given fields:
func (_m *TaskPortOut) OutGetAllTasks() ([]entity.Task, error) {
	ret := _m.Called()

	var r0 []entity.Task
	if rf, ok := ret.Get(0).(func() []entity.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutUpdateTask provides a mock function with given fields: ID, task
func (_m *TaskPortOut) OutUpdateTask(ID int, task *entity.Task) (*entity.Task, error) {
	ret := _m.Called(ID, task)

	var r0 *entity.Task
	if rf, ok := ret.Get(0).(func(int, *entity.Task) *entity.Task); ok {
		r0 = rf(ID, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *entity.Task) error); ok {
		r1 = rf(ID, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskPortOut interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskPortOut creates a new instance of TaskPortOut. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskPortOut(t mockConstructorTestingTNewTaskPortOut) *TaskPortOut {
	mock := &TaskPortOut{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
