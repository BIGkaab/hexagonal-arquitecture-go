// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/BIGKaab/hexagonal-arquitecture-go/domain"
	dto "github.com/BIGKaab/hexagonal-arquitecture-go/infraestructure/inside/dto"
	entity "github.com/BIGKaab/hexagonal-arquitecture-go/infraestructure/outside/gorm/entity"

	mock "github.com/stretchr/testify/mock"
)

// TaskMapper is an autogenerated mock type for the TaskMapper type
type TaskMapper struct {
	mock.Mock
}

// TaskDomainToDto provides a mock function with given fields: task
func (_m *TaskMapper) TaskDomainToDto(task domain.Task) dto.Task {
	ret := _m.Called(task)

	var r0 dto.Task
	if rf, ok := ret.Get(0).(func(domain.Task) dto.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(dto.Task)
	}

	return r0
}

// TaskDomainToEntity provides a mock function with given fields: task
func (_m *TaskMapper) TaskDomainToEntity(task domain.Task) entity.Task {
	ret := _m.Called(task)

	var r0 entity.Task
	if rf, ok := ret.Get(0).(func(domain.Task) entity.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(entity.Task)
	}

	return r0
}

// TaskDtoToDomain provides a mock function with given fields: task
func (_m *TaskMapper) TaskDtoToDomain(task dto.Task) domain.Task {
	ret := _m.Called(task)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(dto.Task) domain.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	return r0
}

// TaskEntityToDomain provides a mock function with given fields: task
func (_m *TaskMapper) TaskEntityToDomain(task entity.Task) domain.Task {
	ret := _m.Called(task)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(entity.Task) domain.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	return r0
}

type mockConstructorTestingTNewTaskMapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskMapper creates a new instance of TaskMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskMapper(t mockConstructorTestingTNewTaskMapper) *TaskMapper {
	mock := &TaskMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
