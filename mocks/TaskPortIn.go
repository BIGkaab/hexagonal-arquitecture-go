// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/BIGKaab/hexagonal-arquitecture-go/domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskPortIn is an autogenerated mock type for the TaskPortIn type
type TaskPortIn struct {
	mock.Mock
}

// InAddTask provides a mock function with given fields: task
func (_m *TaskPortIn) InAddTask(task domain.Task) (domain.Task, error) {
	ret := _m.Called(task)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(domain.Task) domain.Task); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InDeleteTask provides a mock function with given fields: ID
func (_m *TaskPortIn) InDeleteTask(ID int) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InFindTaskById provides a mock function with given fields: ID
func (_m *TaskPortIn) InFindTaskById(ID int) (domain.Task, error) {
	ret := _m.Called(ID)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(int) domain.Task); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InGetAllTasks provides a mock function with given fields:
func (_m *TaskPortIn) InGetAllTasks() ([]domain.Task, error) {
	ret := _m.Called()

	var r0 []domain.Task
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InUpdateTask provides a mock function with given fields: ID, task
func (_m *TaskPortIn) InUpdateTask(ID int, task domain.Task) (domain.Task, error) {
	ret := _m.Called(ID, task)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(int, domain.Task) domain.Task); ok {
		r0 = rf(ID, task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, domain.Task) error); ok {
		r1 = rf(ID, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTaskPortIn interface {
	mock.TestingT
	Cleanup(func())
}

// NewTaskPortIn creates a new instance of TaskPortIn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTaskPortIn(t mockConstructorTestingTNewTaskPortIn) *TaskPortIn {
	mock := &TaskPortIn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
